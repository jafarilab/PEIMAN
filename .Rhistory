}
else if (it <= nr) {	#too many iterations
ende <- TRUE
cat("\nWARNING! Iteration stop in h=",h," without convergence!\n\n")
}
}
Xh <- Xh-(th%*%t(ph))	#calculate new Xh
T <- cbind(T,th)	#build matrix T
P <- cbind(P,ph)	#build matrix P
oldVar <- currVar
currVar <- sum(diag(var(Xh)))
pcvar <- c(pcvar,(oldVar-currVar)/varTotal)
nr <- 0
}
list(T=T,P=P,pcvar=pcvar)
}
# The example.txt has gene expression data. In the file there is a control
# group of 20 replicates and an experiment group of 6 replicates. This script
# shows how to calculate the characteristic direction vector from the data
# using the chdir module.
# Author: Qiaonan Duan
# Ma'ayan Lab, Icahn School of Medicine at Mount Sinai
# Jan. 13, 2014
source('chdir.R')
source('nipals.R')
data <- read.table('example.txt',sep="\t")
header <- as.list(data[1,2:dim(data)[2]])
genes <- as.vector(data[,1])[2:dim(data)[1]]
mat <- as.matrix(data[2:dim(data)[1],2:dim(data)[2]])
ctrlMat <- mat[,header==0]
expmMat <- mat[,header==1]
# unitV is the characteristic direction.
unitV <- chdir(ctrlMat,expmMat,genes)
getwd
getwd()
setwd("C:\Users\user\Desktop\Avi Mayan, Biological networks\Jan 2015\chdir_R\chdir_R")
setwd('C:\Users\user\Desktop\Avi Mayan, Biological networks\Jan 2015\chdir_R\chdir_R')
getwd()
# The example.txt has gene expression data. In the file there is a control
# group of 20 replicates and an experiment group of 6 replicates. This script
# shows how to calculate the characteristic direction vector from the data
# using the chdir module.
# Author: Qiaonan Duan
# Ma'ayan Lab, Icahn School of Medicine at Mount Sinai
# Jan. 13, 2014
source('chdir.R')
source('nipals.R')
data <- read.table('example.txt',sep="\t")
header <- as.list(data[1,2:dim(data)[2]])
genes <- as.vector(data[,1])[2:dim(data)[1]]
mat <- as.matrix(data[2:dim(data)[1],2:dim(data)[2]])
ctrlMat <- mat[,header==0]
expmMat <- mat[,header==1]
# unitV is the characteristic direction.
unitV <- chdir(ctrlMat,expmMat,genes)
"nipals" <-
function(X,a,it=10,tol=1e-4)
#fct nipals calculates the principal components of a given data matrix X according to
#the NIPALS algorithm (Wold).
#X...data matrix, a...number of components,
#it...maximal number of iterations per component,
#tol...precision tolerance for calculation of components
{
Xh <- scale(X,center=TRUE,scale=FALSE)		#mean-centering of data matrix X
nr <- 0
T <- NULL
P <- NULL
pcvar <- NULL
varTotal <- sum(diag(var(Xh)))
currVar <- varTotal
for (h in 1:a){
th <- Xh[,1]		#starting value for th is 1st column of Xh
ende <- FALSE
#3 inner steps of NIPALS algorithm
while (!ende){
nr <- nr+1
# the result of matrix multiplication operation (%*%) is a matrix of a single
# valule. A matrix cannot multiply another using scalar multiplication (*).
# as.vector convert a value of class matrix to a value of class double.
# (A'*B)' = B'*A
ph <- t((t(th)%*%Xh) * as.vector(1/(t(th)%*%th)))	#LS regression for ph
ph <- ph * as.vector(1/sqrt(t(ph)%*%ph))		#normalization of ph
thnew <- t(t(ph)%*%t(Xh) * as.vector(1/(t(ph)%*%ph)))	#LS regression for th
prec <- t(th-thnew)%*%(th-thnew)	#calculate precision
# cat("actual precision: ",sqrt(prec),"\n")
th <- thnew	#refresh th in any case
#check convergence of th
if (prec <= (tol^2)) {
ende <- TRUE
}
else if (it <= nr) {	#too many iterations
ende <- TRUE
cat("\nWARNING! Iteration stop in h=",h," without convergence!\n\n")
}
}
Xh <- Xh-(th%*%t(ph))	#calculate new Xh
T <- cbind(T,th)	#build matrix T
P <- cbind(P,ph)	#build matrix P
oldVar <- currVar
currVar <- sum(diag(var(Xh)))
pcvar <- c(pcvar,(oldVar-currVar)/varTotal)
nr <- 0
}
list(T=T,P=P,pcvar=pcvar)
}
"chdir" <-
function(ctrl,expm,genes,r=1)
# This function caclulates the characteristic direction for a gene expression dataset.
#  	ctrl: control gene expressoion data, a matrix object
#  	expm: experiment gene expression data, a matrix object
#  	b: return value, a vector of n-components, representing the characteristic
#          direction of the gene expression dataset. n equals to the number of genes in the
#          expression dataset. b is also a matrix object. b is sorted by its components'
#          absolute values in descending order.
#  	r: regularized term. A parameter that smooths the covariance matrix and reduces
#          potential noise in the dataset. The default value for r is 1, no regularization.
#
#       For the input matrix rows are genes and columns are gene expression profiles.
#       r is the regulization term ranging [0,1]. b is the characteristic direction.
#       ctrl(control) and expm(experiment) matrices should have the same number
#       of genes(rows).
#
#       Author: Qiaonan Duan
#       Ma'ayan Lab, Icahn School of Medicine at Mount Sinai
#       Jan.13, 2014
#
#		Add gene symbols to results. Apr. 4, 2014
{
if(dim(ctrl)[1]!=dim(expm)[1]){
stop('Control expression data must have equal number of genes as experiment expression data!')
}
if(any(is.na(ctrl))||any(is.na(expm))){
stop('Control expression data and experiment expression data have to be real numbers. NA was found!')
}
# There should be variance in expression values of each gene. If
# gene expression values of a gene are constant, it would dramatically
# affect the LDA caculation and results in a wrong answer.
constantThreshold <- 1e-5;
ctrlConstantGenes <- diag(var(t(ctrl))) < constantThreshold
expmConstantGenes <- diag(var(t(expm))) < constantThreshold
if (any(ctrlConstantGenes)){
errMes <- sprintf('%s row(s) in control expression data are constant. Consider Removing the row(s).',paste(as.character(which(ctrlConstantGenes)),collapse=','))
stop(errMes)
}else if(any(expmConstantGenes)){
errMes <- sprintf('%s row(s) in experiment expression data are constant. Consider Removing the row(s).',paste(as.character(which(expmConstantGenes)),collapse=','))
stop(errMes)
}
# place control gene expression data and experiment gene expression data into
# one matrix
combinedData <- cbind(ctrl,expm)
# get the number of samples, namely, the total number of replicates in  control
# and experiment.
dims <- dim(combinedData)
samplesCount <- dims[2]
# the number of output components desired from PCA. We only want to calculate
# the chdir in a subspace that capture most variance in order to save computation
# workload. The number is set 20 because considering the number of genes usually
# present in an expression matrix 20 components would capture most of the variance.
componentsCount <- min(c(samplesCount-1,20))
# use the nipals PCA algorithm to calculate R, V, and pcvars. nipals algorithm
# has better performance than the algorithm used by R's builtin PCA function.
# R are scores and V are coefficients or loadings. pcvars are the variances
# captured by each component
pcaRes <- nipals(t(combinedData),componentsCount,1e5,1e-4)
R <- pcaRes$T
V <- pcaRes$P
pcvars <- pcaRes$pcvar
# we only want components that cpature 95% of the total variance or a little above.
# cutIdx is the index of the compoenent, within which the variance is just equal
# to or a little greater than 95% of the total.
cutIdx <- which(cumsum(pcvars)>0.95)
if(length(cutIdx)==0){
cutIdx <- componentsCount
}else{
cutIdx <- cutIdx[1]
}
# slice R and V to only that number of components.
R <- R[,1:cutIdx]
V <- V[,1:cutIdx]
# the difference between experiment mean and control mean.
meanvec <- rowMeans(expm) - rowMeans(ctrl)
# all the following steps calculate shrunkMats. Refer to the ChrDir paper for detail.
# ShrunkenMats are the covariance matrix that is placed as denominator
# in LDA formula. Notice the shrunkMats here is in the subspace of those components
# that capture about 95% of total variance.
Dd <- t(R)%*%R/samplesCount
Dd <- diag(diag(Dd))
sigma <- mean(diag(Dd))
shrunkMats <- r*Dd + sigma*(1-r)*diag(dim(R)[2])
# The LDA formula.
#  V%*%solve(shrunkMats)%*%t(V) transforms the covariance matrix from the subspace to full space.
b <- V%*%solve(shrunkMats)%*%t(V)%*%meanvec
# normlize b to unit vector
b <- b*as.vector(sqrt(1/t(b)%*%b))
# sort b to by its components' absolute value in decreasing order and get the
# sort index
sortRes <- sort(abs(b),decreasing=TRUE,index.return=TRUE)
# sort b by the sort index
bSorted <- as.matrix(b[sortRes$ix])
# sort genes by the sort index
genesSorted <- genes[sortRes$ix]
# assign genesSorted as the row names of bSorted
rownames(bSorted) <- genesSorted
# return bSorted
bSorted <- bSorted
}
# The example.txt has gene expression data. In the file there is a control
# group of 20 replicates and an experiment group of 6 replicates. This script
# shows how to calculate the characteristic direction vector from the data
# using the chdir module.
# Author: Qiaonan Duan
# Ma'ayan Lab, Icahn School of Medicine at Mount Sinai
# Jan. 13, 2014
source('chdir.R')
source('nipals.R')
data <- read.table('example.txt',sep="\t")
header <- as.list(data[1,2:dim(data)[2]])
genes <- as.vector(data[,1])[2:dim(data)[1]]
mat <- as.matrix(data[2:dim(data)[1],2:dim(data)[2]])
ctrlMat <- mat[,header==0]
expmMat <- mat[,header==1]
# unitV is the characteristic direction.
unitV <- chdir(ctrlMat,expmMat,genes)
chdir(c,c1)
ctrl
c
c1
str(c)
dim(c)
cc=as.matrix(c)
dim(cc)
cc1=as.matrix(c1)
cc1
chdir(cc,cc1)
chdir(cc,cc1,r=1)
s=matric(c(2,3,1,0),2,2)
s=matrix(c(2,3,1,0),2,2)
s
eigen(s)
source("http://bioconductor.org/biocLite.R")
biocLite(c("annotationdbi" , "Biobase","BiocGenerics","BioStrings","BSGenome","BSgenome.Hsapiens.UCSC.hg19","BSGenome.Celegans.USSC.ce2","GenomicRanges","GenomicFeatures"))
getwd()
w=list(x=c(3,4),y=matrix(1:10,nrow=5),z=c("DNA","RNA","Protein"))
str(w)
class(w)
w=list(location=x,type=y, seq=z)
w
w$type
w[[z]]
w[[2]]
w[2]
class(w[[2]])
class(w[2])
lenght(w)
names(w)
summary(x)
summary(w)
x1=c(1:10)
mean(x1)
dist(x1)
function meandist(x){
a=mean(x)
b=dist(x)
w1=list(a,b)
}
meandist(1:10)
myf=function meandist(x,...){
a=mean(x)
b=dist(x)
w1=list(a,b)
}
meandist=function (x,...){
a=mean(x)
b=dist(x)
w1=list(a,b)
}
meandist(1:10)
w1
library(Biostrings)
DNA_seq=sample(c("A","C","G","T"),1000,replace=TRUE)
DNA_seq
DNA_seq=paste(DNA-seq,collapse="")
DNA_seq=paste(DNA_seq,collapse="")
DNA_seq
matches<-matchPattern("ACGT",DNA_seq)
matches
str(matches)
showMethods(class="XStringViews")
matches<-matchPattern("ACGTT",DNA_seq)
matches
DNA_seq=sample(c("A","C","G","T"),10000,replace=TRUE)
matches<-matchPattern("ACGTT",DNA_seq)
DNA_seq=sample(c("A","C","G","T"),10000,replace=TRUE)
matches<-matchPattern("ACGTT",DNA_seq)
DNA_seq=paste(DNA_seq,collapse="")
matches<-matchPattern("ACGTT",DNA_seq)
matches
4^6
DNA_seq=sample(c("A","C","G","T"),4^10,replace=TRUE)
DNA_seq=paste(DNA_seq,collapse="")
matches<-matchPattern("ACGTACGT",DNA_seq)
matches
DNA_seq=sample(c("A","C","G","T"),4^8,replace=TRUE)
DNA_seq=paste(DNA_seq,collapse="")
matches<-matchPattern("ACGTACGT",DNA_seq)
matches
str(matches)
slotNames(matches)
matches@rangers@start
matches@ranges@start
subject(methods)
showMethods(class="XStringViews") # For S4 classes
library(Bsgenome.Celegans.UCSC.ce2)
library(BSgenome.Celegans.UCSC.ce2)
library(BSgenome.Hsapiens.UCSC.hg19)
genome=BSgenome.Hsapiens.UCSC.hg19
?alphabetfrequency
??alphabetfrequency
?alphabetFrequency
alphabetFrequency(genome)
library(BSgenome.Hsapiens.UCSC.hg19)
library(BSgenome.Hsapiens.UCSC.hg19)
biocLite()
source("http://bioconductor.org/biocLite.R")
> biocLite(c("annotationdbi" , "Biobase","BiocGenerics","BioStrings",
"BSGenome","BSgenome.Hsapiens.UCSC.hg19","BSgenome.Celegans.USSC.ce2",
"GenomicRanges","GenomicFeatures"))
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
> biocLite(c("annotationdbi" , "Biobase","BiocGenerics","BioStrings",
biocLite(c("annotationdbi" , "Biobase","BiocGenerics","BioStrings",
"BSGenome","BSgenome.Hsapiens.UCSC.hg19","BSgenome.Celegans.USSC.ce2",
"GenomicRanges","GenomicFeatures"))
library(BSgenome.Hsapiens.UCSC.hg19)
library(BSgenome.Celegans.UCSC.ce2)
biocLite(c("annotationdbi" , "Biobase","BiocGenerics","BioStrings",
"BSGenome","BSgenome.Hsapiens.UCSC.hg19","BSgenome.Celegans.USSC.ce2",
"GenomicRanges","GenomicFeatures"))
biocLite(c("BSgenome.Celegans.UCSC.ce2"))
biocLite("BSgenome")
biocLite("Biostrings")
biocLite("AnnotationDbi")
genome=BSgenome.Celegans.UCSC.ce2
library(BSgenome.Celegans.UCSC.ce2)
genome=BSgenome.Celegans.UCSC.ce2
genome
str(genome)
seqinfo(genome)
sourceUrl(genome)
alphabetFrequency(genome)
?alphabetFrequency
letterFrequency(genome)
alphabetFrequency(genome$chrM)
alphabetFrequency(genome)
alphabetFrequency(genome$All)
setwd("C:\Users\user\Desktop\PEIMAN R")
data = read.table("ptm.txt" , header = TRUE, sep ="\t")
setwd("C:\\Users\\user\\Desktop\\PEIMAN R")
data = read.table("ptm.txt" , header = TRUE, sep ="\t")
names(data) <- c("AC" , "OS", "PTM")
x <- read.table("list.txt" , header = FALSE)
UserList <- x[,1]
UserList <- as.character(UserList)
OS <- "Homo sapiens (Human)."\
OSindx <- which( data$"OS" == OS)
data.OS <- data[OSindx,]
indx <- which(UserList %in% data.OS$"AC" )
ValidList   <- UserList[indx]
P = unique(data.OS$"AC")
N <- length(P)
n <- length(ValidList)
indx <- which(data.OS$"AC" %in% ValidList)
u <- as.character(data.OS[indx,]$"PTM")
v <- as.character(data.OS[indx,]$"AC")
Rep <- data.frame(v,u)
names(Rep) <- c("AC" , "PTM")
List <- unique(Rep$"PTM")
List <- as.character(List)
freq = c()
for( i in 1:length(List)){
freq = c ( freq , length( which( Rep$"PTM" %in% List[i]) ) )
}
user <- data.frame(List , freq)
List <- unique(data.OS$"PTM")
List <- as.character(List)
freq = c()
for( i in 1:length(List)){
freq = c ( freq , length(which( data.OS$"PTM" %in% List[i]  )) )
uniprot <- data.frame(List , freq)
out <- data.frame( PTM = uniprot$"List" , FreqinList = user$"freq" ,
x = out$FreqinList
m = out$FreqinUniProt
nn = N - m
k = n
out$Corrected.Pvalue <- p.adjust(out$pvalue, method = "fdr")
indx <- which(uniprot$"List" %in% user$"List" , arr.ind = TRUE )
uniprot = uniprot[ order(uniprot$"List") , ]
out$pvalue <- 1 - phyper(x , m , nn , k)
uniprot <- uniprot[indx,]
FreqinUniProt = uniprot$"freq", Sample = n, Population = N)
}
user = user[ order(user$"List") , ]
out
getwd()
data = read.table("ptm.txt" , header = TRUE, sep ="\t")
load("C:/Users/user/Desktop/PEIMAN R/1.rda")
load("C:/Users/user/Desktop/PEIMAN R/1.rda")
data = read.table("ptm.txt" , header = TRUE, sep ="\t")
names(data) <- c("AC" , "OS", "PTM")
x <- read.table("list.txt" , header = FALSE)
UserList <- x[,1]
UserList <- as.character(UserList)
OS <- "Homo sapiens (Human)."\
OSindx <- which( data$"OS" == OS)
attach("1.rda")
setwd("C:\\Users\\user\\Desktop\\PEIMAN R")
##data = read.table("ptm.txt" , header = TRUE, sep ="\t")
attach("1.rda")
names(data) <- c("AC" , "OS", "PTM")
x <- read.table("list.txt" , header = FALSE)
UserList <- x[,1]
UserList <- as.character(UserList)
OS <- "Homo sapiens (Human)."
OSindx <- which( data$"OS" == OS)
data.OS <- data[OSindx,]
indx <- which(UserList %in% data.OS$"AC" )
ValidList   <- UserList[indx]
P = unique(data.OS$"AC")
N <- length(P)
n <- length(ValidList)
indx <- which(data.OS$"AC" %in% ValidList)
u <- as.character(data.OS[indx,]$"PTM")
v <- as.character(data.OS[indx,]$"AC")
Rep <- data.frame(v,u)
names(Rep) <- c("AC" , "PTM")
List <- unique(Rep$"PTM")
List <- as.character(List)
freq = c()
for( i in 1:length(List)){
freq = c ( freq , length( which( Rep$"PTM" %in% List[i]) ) )
}
user <- data.frame(List , freq)
List <- unique(data.OS$"PTM")
List <- as.character(List)
freq = c()
for( i in 1:length(List)){
freq = c ( freq , length(which( data.OS$"PTM" %in% List[i]  )) )
}
uniprot <- data.frame(List , freq)
indx <- which(uniprot$"List" %in% user$"List" , arr.ind = TRUE )
uniprot <- uniprot[indx,]
user = user[ order(user$"List") , ]
uniprot = uniprot[ order(uniprot$"List") , ]
out <- data.frame( PTM = uniprot$"List" , FreqinList = user$"freq" ,
FreqinUniProt = uniprot$"freq", Sample = n, Population = N)
x = out$FreqinList
m = out$FreqinUniProt
nn = N - m
k = n
out$pvalue <- 1 - phyper(x , m , nn , k)
out$Corrected.Pvalue <- p.adjust(out$pvalue, method = "fdr")
out
?attach
#setwd("C:\\Users\\user\\Desktop\\PEIMAN R")
##data = read.table("ptm.txt" , header = TRUE, sep ="\t")
attach("1.rda")
names(data) <- c("AC" , "OS", "PTM")
x <- read.table("list.txt" , header = FALSE)
UserList <- x[,1]
UserList <- as.character(UserList)
OS <- "Homo sapiens (Human)."
OSindx <- which( data$"OS" == OS)
data.OS <- data[OSindx,]
indx <- which(UserList %in% data.OS$"AC" )
ValidList   <- UserList[indx]
P = unique(data.OS$"AC")
N <- length(P)
n <- length(ValidList)
indx <- which(data.OS$"AC" %in% ValidList)
u <- as.character(data.OS[indx,]$"PTM")
v <- as.character(data.OS[indx,]$"AC")
Rep <- data.frame(v,u)
names(Rep) <- c("AC" , "PTM")
List <- unique(Rep$"PTM")
List <- as.character(List)
freq = c()
for( i in 1:length(List)){
freq = c ( freq , length( which( Rep$"PTM" %in% List[i]) ) )
}
user <- data.frame(List , freq)
List <- unique(data.OS$"PTM")
List <- as.character(List)
freq = c()
for( i in 1:length(List)){
freq = c ( freq , length(which( data.OS$"PTM" %in% List[i]  )) )
}
uniprot <- data.frame(List , freq)
indx <- which(uniprot$"List" %in% user$"List" , arr.ind = TRUE )
uniprot <- uniprot[indx,]
user = user[ order(user$"List") , ]
uniprot = uniprot[ order(uniprot$"List") , ]
out <- data.frame( PTM = uniprot$"List" , FreqinList = user$"freq" ,
FreqinUniProt = uniprot$"freq", Sample = n, Population = N)
x = out$FreqinList
m = out$FreqinUniProt
nn = N - m
k = n
out$pvalue <- 1 - phyper(x , m , nn , k)
out$Corrected.Pvalue <- p.adjust(out$pvalue, method = "fdr")
out
View(out)
